
" ----------------------------------------------------------------------------
" System
" ----------------------------------------------------------------------------

" Basics
set ttyfast
set nocompatible
set lazyredraw
set shell=/bin/bash
set modelines=0
set termencoding=utf-8
set encoding=utf8
set fileformat=unix
set clipboard=unnamedplus
filetype plugin on

" Write swap every second if nothing is typed and report CursorHold
set updatetime=1000

" Intendation
filetype indent on
set autoindent
set smartindent

" Backspace over intendation, EOL and outside of current insert
set backspace=indent,eol,start

" Menu next to the airline
set wildmenu
set wildignore+=.git,.hg,.svn
set wildmode=longest:full,full
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest,*.rbc,*.class,*.pyc
set wildignore+=*.ai,*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,*.psd,*.webp
set wildignore+=*.avi,*.divx,*.mp4,*.webm,*.mov,*.m2ts,*.mkv,*.vob,*.mpg,*.mpeg
set wildignore+=*.mp3,*.oga,*.ogg,*.wav,*.flac
set wildignore+=*.eot,*.otf,*.ttf,*.woff
set wildignore+=*.doc,*.pdf,*.cbr,*.cbz
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz,*.kgb
set wildignore+=*.swp,.lock,.DS_Store,._*

" Leave it, needed for regexp
set magic

" Window's title (i3 tab for example)
set title

" Enable mouse with tmux 2.4
set mouse=a

" Allow switching buffers w/o saving
set hidden

" Don't join spaces on paste
set nojoinspaces

" Don't autoextend comments or join comment characters
set formatoptions-=r formatoptions-=c formatoptions-=o formatoptions-=j

" Autosaves
if has("unix")
  set backupdir=~/.vim/backup
  set directory=~/.vim/tmp
  set undodir=~/.vim/undo
elseif has("win32")
  let g:nv_dir=substitute($HOME, '\\', '\\\', "g").'\\AppData\\Local\\nvim\\'
  execute "set backupdir=".g:nv_dir.'backup'
  execute "set directory=".g:nv_dir.'tmp'
  execute "set undodir=".g:nv_dir.'undo'
endif
set backup
set undofile
set noswapfile
set undolevels=1000
set undoreload=10000
set history=1000


" NetRW
let g:netrw_banner = 0
let g:netrw_browse_split = 3
let g:netrw_liststyle = 3
let g:netrw_winsize = 20

" Highlight brackets
set showmatch

" Search is incremental and case-sensitive if UpperCase is present
set ignorecase
set smartcase
set hlsearch
set incsearch

" <TAB> at the ^ equals to 'shiftwidth'
set smarttab

" Round indent to multiple of 'shiftwidth`
set shiftround

" Expand <TAB> into spaces
set expandtab

" reveal already opened files instead of opening new buffers
set switchbuf=useopen,usetab,newtab

" Add space before comments
let NERDSpaceDelims=1

" ----------------------------------------------------------------------------
" Visuals
" ----------------------------------------------------------------------------

" Highlight up to 512 chars per line
set synmaxcol=512

" Attempt to show 24-bit palette with 256 colours fallback
if has("termguicolors")
    set termguicolors
else
    set t_Co=256
endif

" BG and italics colour fix for tmux
if &term =~# '^screen'
    set t_ut=
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set t_ZH=^[[3m
    set t_ZR=^[[23m
endif

" Colorscheme theme
colorscheme github
let g:github_colors_soft = 1
let g:github_colors_block_diffmark = 1
syntax on

" Nice highlight of the current line, turned off by  default
highlight CursorLine cterm=NONE ctermbg=NONE ctermfg=NONE guibg=NONE guifg=NONE
set nocul

" Don't show typed command, causes glitches in SR-bottom corner, show mode
set noshowcmd
set showmode

" Line numbers by default
set number

" Don't show startup message
set shortmess+=Ic

" Wrap long lines and don't break words
set wrap
set linebreak

" indent wrapped lines, by...
set breakindent
set breakindentopt=shift:2,sbr
set showbreak=↪

" Better vertical split visualization
set fillchars+=vert:\┃

" Natural splits
set splitbelow
set splitright

" Split vertical by default
set diffopt+=vertical

" Disable all bells and don't blink with the cursor
set noerrorbells
set novisualbell
set vb t_vb=
set guicursor=a:blinkon0

" Always show airline
set laststatus=2

" Completion options, don't show preview window with additional information,
" show completion menu even if there is one option available,
" don't insert text until explicitly asked to.
set completeopt-=preview
set completeopt+=menuone
set completeopt+=noinsert,noselect

" Automatically show signcolumn and try to accommodate up to 6 sections
if has('nvim-0.4.0')
  set signcolumn=auto:6
elseif has('nvim-0.3.4') || has('signs')
  set signcolumn=auto
endif

" Change cursor shape
set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" ...and in VTE
" TODO: Wrap in `if/else`
" let &t_SI = "\<Esc>[6 q"
" let &t_SR = "\<Esc>[4 q"
" let &t_EI = "\<Esc>[2 q"

" Invisible characters
set listchars=tab:▸\ ,nbsp:␣,trail:·,eol:¶,space:·,conceal:·

" ----------------------------------------------------------------------------
" Hotkeys
" ----------------------------------------------------------------------------

" F1 does _absolutely_ nothing
nnoremap <F1> <nop>
inoremap <F1> <nop>
map <F1> <nop>

" F3 yanks all
map <F3> :%y+<cr>

" Line numbers
map <silent> <F4> :set nonumber!<cr>

" Toggle invisible chars
map <silent> <F5> :set list!<cr>

" Toggle spell-check
map <silent> <F7> :set spell!<cr>

" Go back into normal mode by `ii`
inoremap ii <esc>

" Remap leader from `\` to `Space`
let mapleader = "\<Space>"

" <leader>+m toggles "scroll mode"
map <leader>m :call ToggleScrollMode()<cr>

" Insert date header
map <F12> :call DD()<cr>

" Toggle line numbers between absolute/relative
map <S-l> :call ToggleNumber()<cr>

" Save as usual
map <C-s> :w!<CR>
imap <C-s> <Esc>:w!<CR>a

" Close window/split as usual
map <C-w> :close<CR>

" Don't copy result of 'dd', 's' and 'c' into buffer
nnoremap d "_d
vnoremap d "_d
nnoremap s "_s
vnoremap s "_s
nnoremap c "_c
vnoremap c "_c
nnoremap C "_C
vnoremap C "_C

" Move up/down using _visual_ lines (e.g. wrapped ones)
nnoremap j gj
nnoremap k gk
nnoremap <Up> gk
nnoremap <Down> gj

" Move to beginning/end of line
nnoremap B ^
nnoremap E $

" Add new lines and spaces without changing the mode
nmap <Leader>j mvo<Esc>`v
nmap <Leader>k mvO<Esc>`v
nmap <Leader>h i<space><esc>l
nmap <Leader>l a<space><esc>h

" Save is forced by default (don't nag about "file exists")
map :W<cr> :w!<cr>
map :w<cr> :w!<cr>
map :x<cr> :x!<cr>

" cd into file's directory
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Clear all highlights
nnoremap <esc><esc> :noh<return><esc>

" Don't use Ex mode, exit on QQ
nnoremap Q <nop>
nnoremap QQ ZZ

" Switch splits using Ctrl+hjkl
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Buffer management
nmap <leader>. :bn<CR>
nmap <leader>, :bp<CR>
nmap <leader>q :bp <BAR> bd #<CR>

" Leave text selected after changing intendation with <>
vnoremap < <gv
vnoremap > >gv

" Change folding levels
nmap z1 :set foldlevel=0<CR>
nmap z2 :set foldlevel=1<CR>
nmap z3 :set foldlevel=2<CR>
nmap z4 :set foldlevel=3<CR>

" Move to another line with arrow keys
set whichwrap+=<,>

" Resize splits with +-
if bufwinnr(1)
    map + <C-W>+
    map - <C-W>-
endif

" Move a line of text using Shift+[jk]
nmap <S-j> mz:m+<cr>`z
nmap <S-k> mz:m-2<cr>`z
vmap <S-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <S-k> :m'<-2<cr>`>my`<mzgv`yo`z

" CTRL+V in insert mode
inoremap <C-V> <C-r>+

" CTRL+Z in insert mode
inoremap <C-Z> <Esc>ui

" Enable <S-TAB> to reduce intendation
nnoremap <S-Tab> <<
inoremap <S-Tab> <C-d>

" ----------------------------------------------------------------------------
" Macros
" ----------------------------------------------------------------------------

" Mostly use 2 spaces as <Tab>
autocmd FileType text,markdown,vim,ini,gitconfig,*.yml setlocal tabstop=2 shiftwidth=2 softtabstop=2

" Keep Web documents to 2 spaces as <Tab>
autocmd BufRead,BufNewFile *.htm,*.html,*.css,*.js setlocal tabstop=2 shiftwidth=2 softtabstop=2

" Pythonic tabs are limited to *.py
autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4

" Fix YAML intendation
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab indentkeys-=<:>

" format JSON code
com! FormatJSON %!python -m json.tool

" Resize splits when VIM is resized
autocmd VimResized * wincmd =

" Return to last edit position when opening files
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit'
  \ |   exe "normal! g`\""
  \ | endif

" Scroll mode, keeps cursor centered and horizontally unchanged
function! ToggleScrollMode()
    if exists("s:scroll_mode")
        unmap k
        unmap j
        set startofline
        set virtualedit=""
        unlet s:scroll_mode
        echom "scroll mode OFF"
    else
        nnoremap j <C-e>j
        nnoremap k <C-y>k
        set virtualedit=all
        set nostartofline
        let s:scroll_mode = 1
        echom "scroll mode ON"
    endif
endfunction

" Toggle between number and relativenumber
function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
        set nocul
    endif
endfunc

" Strips trailing whitespace at the end of files.
function! WhitespaceStrip()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction

" Insert date header
function! DD()
  let date = strftime('%a %d %b %Y %H:%M')
  let line = "\n====================="
  let out = date . line
  put =out
endfunc
