#
# Functions -----------------------------------------------------------------------------
#

# Grep for a process without showing `grep` command itself
psgrep() { grc ps ax | grep -v grep | grep "$@" -i --color=auto; }

# Make directory and cd into it
mcd() { mkdir "$1" && cd "$1" || exit; }

# Find files not owned by current user in pwd
notusr() { find . \! -user "$@" -print; }

# Create tmux-split and close it after $editor is terminated
if { [ -n "$TMUX" ]; }; then peek() { tmux split-window -p 40 "$EDITOR" "$@" || exit; }; fi

# Compress file or directory
rmx() { if [ $# -eq 1 ]; then rar a -m5 -ma5 -s -md64m "${1%/}.rar" "${1%/}"; fi }

# Whois abuse contact
wabuse() { if [ $# -eq 1 ]; then whois ${1%} | grep -i abuse; fi }

# Lazy git
lzg() { git add . && git commit -a -m "$@" && git push; }

# FZF ----------------------------------------------------------------------------------

# export FZF_COMPLETION_OPTS=''

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

# (EXPERIMENTAL) Advanced customization of fzf options via _fzf_comprun function
# - The first argument to the function is the name of the command.
# - You should make sure to pass the rest of the arguments to fzf.
_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    cd)           fzf "$@" --preview 'tree -C {} | head -200' ;;
    export|unset) fzf "$@" --preview "eval 'echo \$'{}" ;;
    ssh)          fzf "$@" --preview 'dig {}' ;;
    *)            fzf "$@" ;;
  esac
}

# fe - search and open a file with the default editor
# TODO:
#   1. Add preview
#   2. Accept stdin as an argument in addition to $PWD
fe() {
  local IFS=$'\n'
  local files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

#
# TODO: https://github.com/junegunn/fzf/wiki/examples
#

# fcf - cd into the directory of a selected file
# TODO:
#   1. Add file preview
#   2. Accept stdin as an argument in addition to $PWD
fcf() {
   local file
   local dir
   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

# fcd - cd into a directory
# TODO:
#   1. Add directory preview
#   2. Accept stdin as an argument in addition to $PWD
fcd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# fcp - cd into parent directory
# TODO:
#   Nothing, just a cool implementation!
#   See if we can re-use it for other fuzzy-functions
fcp() {
  local dirs=()
  local parent_dir
  get_parent_dirs() {
    if [[ -d "$1" ]]; then dirs+=("$1"); else return; fi
    if [[ "$1" == '/' ]]; then
      for _dir in "${dirs[@]}"; do echo "$_dir"; done
    else
      get_parent_dirs "$(dirname "$1")"
    fi
  }
  parent_dir="$(
    get_parent_dirs "$(realpath "${1:-$PWD}")" \
      | fzf +m \
          --preview 'tree -C {} | head -n $FZF_PREVIEW_LINES' \
          --preview-window='right:hidden:wrap' \
          --bind=ctrl-v:toggle-preview \
          --bind=ctrl-x:toggle-sort \
          --header='(view:ctrl-v) (sort:ctrl-x)' \
  )" || return
  cd "$parent_dir" || return
}

# fkill - kill process
fkill() {
  local pid
  pid="$(
    ps -ef \
      | sed 1d \
      | fzf -m \
      | awk '{print $2}'
  )" || return
  kill -"${1:-9}" "$pid"
}

#
# Aliases -------------------------------------------------------------------------------
#

# System(ish)
alias ...="cd ../.."
alias ..="cd .."
alias c="clear"
alias rt="reset"
alias sv="sudoedit"
alias psudo="sudo --preserve-env"
alias ca="bat --style plain"
alias dd="dd bs=4M status=progress oflag=sync"
alias dmesg="dmesg -Hwx"
alias symlinks="find . -maxdepth 1 -type l -ls | cut -c 75- | sort |
                ack --color-match='bold yellow' --passthru '\w+\Z' --color |
                ack --color-match='yellow' --passthru '^[a-zA-Z0-9\_\.\-]+' --color |
                ack --color-match='dark yellow' --passthru '\->\s'"
alias xc="xclip -selection clipboard"
alias sup='su --preserve-environment'
alias openports='lsof -Pni4'
alias gpg="gpg2"
alias ap="ansible-playbook"
alias sshkey="cat ~/.ssh/id_rsa.pub | xc && echo 'Copied to clipboard.'"
alias bfg="java -jar $HOME/.local/bin/bfg.jar"
alias remount_nfs="sudo mount -a -t cifs"
alias fd="fdfind -H -I -L"
alias watch="watch -c"

# NeoVim
alias v="nvim"
alias vi="nvim"
alias vim="nvim"
alias gvi="nvim-gtk"

# Git
alias g="git"
alias ga="git add"
alias gc="git commit"
alias gca='git commit -a'
alias gco='git checkout'
alias gd='git diff'
alias gdc='git diff --cached'
alias gt='git status'
alias lg="git log --graph --abbrev-commit --decorate --format=format:'%C(blue)%h%C(reset) - %C(green)(%ar)%C(reset) %C(white)%s%C(reset)%C(reset)%C(bold cyan)%d%C(reset)' --all"
alias gfig="git config --local -e"

# Grc
alias head='grc head'
alias ping='grc ping'
alias ps='grc ps'
alias tail='grc tail'
alias traceroute='grc traceroute'

# Local
alias dp='sudo intel_reg write 0x00061254 0x60003000' # You probably don't need this
alias fonts_rebuild='fc-cache -fv && mkfontdir ~/.local/share/fonts && xset +fp ~/.local/share/fonts'
alias mount_gocrypt=". <(gpg2 -dq $HOME/.local/bin/mount_gocrypt.sh.asc)"
alias mount_usb='udisksctl mount -b /dev/sdb'
alias mp3guess="mp3guessenc -v -r -f -i -s"
alias randomword="perl -e 'open IN, \"</usr/share/dict/words\";rand($.) < 1 && (\$n=\$_) while <IN>;print \$n'"
alias t='task'
alias cal='ncal -M -b'

# Wireless
alias wifimon='wavemon -g'
alias wifilow='sudo iwconfig wlan0 txpower 16'
alias wifihigh='sudo iwconfig wlan0 txpower 20'
