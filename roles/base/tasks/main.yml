---
- name: Assert that we are running against the supported distribution
  assert:
    that:
      - ansible_distribution == "Debian"
      - ansible_distribution_file_variety == "Debian"
      - ansible_distribution_release == "buster"
      - ( ansible_distribution_major_version | int ) == 10
    fail_msg: "This playbook is tested exclusively on Debian Buster.\nPlease double-check you are executing the right thing."

- name: Parse cpuinfo
  shell:
    cmd: "grep -i vendor /proc/cpuinfo | head -1 | awk '{print $3}'"
  register: cpu_model
  changed_when: False 

- name: Set facts about CPU
  set_fact:
    cpu_vendor: "{{ cpu_model.stdout_lines[0] | string }}"
    cpu_iommu: ""

- name: Register IOMMU GRUB setting for Intel
  set_fact:
    cpu_iommu: " intel_iommu=on"
  when: '"Intel" in cpu_vendor'

- name: Register IOMMU GRUB setting for AMD
  set_fact:
    cpu_iommu: " amd_iommu=on"
  when: '"AMD" in cpu_vendor'

- name: Boostrap vital settings
  import_tasks: bootstrap.yml
  become: yes
  tags:
    - base_bootstrap

- name: Remove unwanted packages
  import_tasks: packages_remove.yml
  become: yes
  tags:
    - base_pkg_unwanted

- name: Prepare repositories
  import_tasks: packages_setup_repos.yml
  become: yes
  tags:
    - base_pkg_repos

- name: Update system
  import_tasks: apt_upgrade.yml
  become: yes
  tags:
    - base_update_system

- name: Set various settings in "/etc"
  import_tasks: settings.yml
  become: yes
  tags:
    - base_etc_settings

- name: Set timezone, locale and "timesyncd"
  import_tasks: time.yml
  become: yes
  tags:
    - base_timezone

- name: Create unique DH moduli
  import_tasks: moduli.yml
  become: yes
  tags:
    - base_moduli

- name: Configure UFW
  import_tasks: ufw.yml
  become: yes
  tags:
    - base_ufw

- name: Install packages
  import_tasks: packages_install.yml
  become: yes
  tags:
    - base_pkg_install

- name: Configure sshguard
  import_tasks: sshguard.yml
  become: yes
  tags:
    - base_sshguard

- name: Configure Knot-resolver
  import_tasks: packages_resolver.yml
  become: yes
  tags:
    - base_knot

- name: Check if reboot is required
  stat:
    path: /var/run/reboot-required
  register: reboot_required

- name: Reboot if system can't pick-up updated kernel and/or userland without it
  debug:
    msg: "Rebooting {{ ansible_hostname | upper }} @ {{ ansible_host }}"
  notify:
    - reboot host
  when: reboot_required.results | json_query( '[*].stat.exists' ) | string == "[True]"

